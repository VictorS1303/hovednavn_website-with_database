---
const {class: className, id, popover, concertId} = Astro.props
---

<dialog
  class='absolute top-[150%] left-[50%] z-[10000] h-[500px] w-fit min-w-[60vw] p-8 transform -translate-x-1/2 -translate-y-[50%] transition-all duration-200 ease-in'
  id=`${concertId}`
  popover={popover}>
  <!-- Close Button Positioned Above the Map -->
  <button
    class='absolute top-0 right-0 z-[10000] grid h-[35px] w-[35px] place-content-center bg-white text-[var(--close-map-btn-text-color)] transition-all duration-150 ease-in hover:text-[var(--secondary-text-color)] cursor-pointer'
    id='close_route_map_btn'
    aria-label='close route'>
    <i class='fas fa-times text-2xl'></i>
  </button>

  <!-- Map -->
  <div
    class='route-map absolute top-[50%] left-[50%] h-full w-full -translate-x-1/2 -translate-y-1/2 z-[40]'
    id='route_map'>
  </div>
</dialog>

<script
  src='https://maps.googleapis.com/maps/api/js?key=AIzaSyCCQlUrqkxhAPlFlgpWnoaWfR_7YhE-P84&libraries=places&callback=initMap'
  async
  defer></script>

<script>
  import {concertCardsData} from '../js/concert_maps_data'

  const dialog = document.querySelector('dialog')
  const closeDialogBtn = document.querySelector('#close_route_map_btn')
  window.addEventListener('DOMContentLoaded', initMap)

  closeDialogBtn?.addEventListener('click', (e) => closeDialog(e))

  // Initialize the map when the page is fully loaded
  // Trigger Corresponding Map Dialog
  function openMapModal(e) {
    const concertId = e.target.dataset.concertId // Get concert ID from data attribute
    const modal = document.getElementById(`${concertId}`) // Find modal by concert ID
  }

  // Initialize Concert Map for a Specific Concert
  function initMap(concertData) {
    if (!concertId) {
      console.error('concertId not provided')
      return
    }

    // Fetch the user's geolocation
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const userLocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        }

        const destination = concertData.concertLocationCoordinates

        // Create the map centered at the user's location
        const map = new google.maps.Map(routeMap, {
          zoom: 14,
          disableDefaultUI: true,
          center: userLocation,
          mapTypeId: 'roadmap',
        })

        // Directions service and renderer
        const directionsService = new google.maps.DirectionsService()
        const directionsRenderer = new google.maps.DirectionsRenderer({
          map,
          polylineOptions: {
            strokeColor: '#801115',
            strokeOpacity: 1.0,
            strokeWeight: 2,
          },
          suppressMarkers: true,
        })

        // Request directions
        const request = {
          origin: userLocation,
          destination: {
            lat: concertData.concertLocationCoordinates.lat,
            lng: concertData.concertLocationCoordinates.lng,
          },
          travelMode: google.maps.TravelMode.DRIVING, // Changed to WALKING
        }

        directionsService.route(request, (result, status) => {
          if (status === google.maps.DirectionsStatus.OK) {
            directionsRenderer.setDirections(result)
          } else {
            console.error('Error fetching directions:', status)
          }
        })

        // Add markers
        new google.maps.Marker({
          position: userLocation,
          map,
          title: 'Your Location',
        })

        new google.maps.Marker({
          position: destination,
          map,
          title: concertData.concertLocation,
          icon: '/src/images/map_marker/map_marker.png',
        })
      },
      (error) => {
        console.error('Error fetching user location:', error)
      },
    )
  }

  // Dialog
  function closeDialog(e) {
    e.target
      .closest('dialog')
      .classList.add('-translate-y-[50%]', 'opacity-0', 'pointer-events-none')
  }
</script>
